[{"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\index.js":"1","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\App.js":"2","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\Helpers\\auth-helpers.js":"3","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\Context\\user-context.jsx":"4","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\Context\\modal-context.jsx":"5","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarUsuarios.jsx":"6","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Empresas.jsx":"7","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarEmpresa.jsx":"8","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Usuarios.jsx":"9","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\AgregarUsuarios.jsx":"10","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\AgregarContactoEmpresa.jsx":"11","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\AgregarEmpresa.jsx":"12","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\ContactoEmpresa.jsx":"13","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarAreas.jsx":"14","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\AgregarAreas.jsx":"15","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Areas.jsx":"16","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\AgregarEstacion.jsx":"17","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarEstacion.jsx":"18","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarContactoEmpresa.jsx":"19","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\QRList.jsx":"20","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\GraficasMes.jsx":"21","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Graficas.jsx":"22","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\GraficasAÃ±oArea.jsx":"23","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Historial.jsx":"24","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\GraficasAnual.jsx":"25","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Login.jsx":"26","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Cliente.jsx":"27","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Revision.jsx":"28","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarRevision.jsx":"29","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\PrivateRoute.jsx":"30","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Estaciones.jsx":"31","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\Layout.jsx":"32","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\Helpers\\model.js":"33","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\FormUsuarios.jsx":"34","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\Buttons.jsx":"35","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\CardEmpresa.jsx":"36","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\Modal.jsx":"37","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\FormEmpresa.jsx":"38","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\CardArea.jsx":"39","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\DescripcionEstaciones.jsx":"40","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\CardEstacion.jsx":"41","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TablaRastrero.jsx":"42","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TablaRoedores.jsx":"43","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TablaVoladores.jsx":"44","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\CardRevision.jsx":"45","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\CardQR.jsx":"46","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\ContainerTablaAreaAnual.jsx":"47","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\FormEstacion.jsx":"48","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TableAreaAnualVolador.jsx":"49","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\RowTableRastrero.jsx":"50","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\RowTableVoladores.jsx":"51","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\RowTableRoedores.jsx":"52","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TablaRevisiones.jsx":"53","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TablaYellow.jsx":"54"},{"size":452,"mtime":1616044534543,"results":"55","hashOfConfig":"56"},{"size":5166,"mtime":1616044534513,"results":"57","hashOfConfig":"56"},{"size":640,"mtime":1620850503412,"results":"58","hashOfConfig":"56"},{"size":2072,"mtime":1616044534516,"results":"59","hashOfConfig":"56"},{"size":820,"mtime":1616044534515,"results":"60","hashOfConfig":"56"},{"size":2206,"mtime":1616044534558,"results":"61","hashOfConfig":"56"},{"size":3420,"mtime":1616044534559,"results":"62","hashOfConfig":"56"},{"size":1401,"mtime":1616044534555,"results":"63","hashOfConfig":"56"},{"size":5267,"mtime":1616773026944,"results":"64","hashOfConfig":"56"},{"size":1671,"mtime":1616044534550,"results":"65","hashOfConfig":"56"},{"size":1868,"mtime":1616044801179,"results":"66","hashOfConfig":"56"},{"size":1037,"mtime":1616044534548,"results":"67","hashOfConfig":"56"},{"size":5238,"mtime":1616773550450,"results":"68","hashOfConfig":"56"},{"size":2035,"mtime":1616044534554,"results":"69","hashOfConfig":"56"},{"size":1697,"mtime":1616044534544,"results":"70","hashOfConfig":"56"},{"size":3949,"mtime":1616044534551,"results":"71","hashOfConfig":"56"},{"size":1033,"mtime":1616044534549,"results":"72","hashOfConfig":"56"},{"size":1564,"mtime":1616044534556,"results":"73","hashOfConfig":"56"},{"size":2450,"mtime":1616044534554,"results":"74","hashOfConfig":"56"},{"size":1606,"mtime":1616044534567,"results":"75","hashOfConfig":"56"},{"size":11389,"mtime":1618793233319,"results":"76","hashOfConfig":"56"},{"size":3039,"mtime":1616044534560,"results":"77","hashOfConfig":"56"},{"size":4260,"mtime":1616044534562,"results":"78","hashOfConfig":"56"},{"size":3213,"mtime":1616772012518,"results":"79","hashOfConfig":"56"},{"size":12979,"mtime":1616771932969,"results":"80","hashOfConfig":"56"},{"size":3763,"mtime":1616044534566,"results":"81","hashOfConfig":"56"},{"size":3409,"mtime":1616770475844,"results":"82","hashOfConfig":"56"},{"size":1689,"mtime":1619664793884,"results":"83","hashOfConfig":"56"},{"size":160,"mtime":1616044534557,"results":"84","hashOfConfig":"56"},{"size":552,"mtime":1616044534533,"results":"85","hashOfConfig":"56"},{"size":8399,"mtime":1616044534560,"results":"86","hashOfConfig":"56"},{"size":3976,"mtime":1616044534531,"results":"87","hashOfConfig":"56"},{"size":806,"mtime":1616044534518,"results":"88","hashOfConfig":"56"},{"size":3901,"mtime":1616044534530,"results":"89","hashOfConfig":"56"},{"size":775,"mtime":1616044534519,"results":"90","hashOfConfig":"56"},{"size":1447,"mtime":1616044534521,"results":"91","hashOfConfig":"56"},{"size":345,"mtime":1616044534532,"results":"92","hashOfConfig":"56"},{"size":2226,"mtime":1616044534527,"results":"93","hashOfConfig":"56"},{"size":908,"mtime":1616044534520,"results":"94","hashOfConfig":"56"},{"size":988,"mtime":1616044534526,"results":"95","hashOfConfig":"56"},{"size":2667,"mtime":1616044534522,"results":"96","hashOfConfig":"56"},{"size":2840,"mtime":1618776429508,"results":"97","hashOfConfig":"56"},{"size":2024,"mtime":1619660343684,"results":"98","hashOfConfig":"56"},{"size":2614,"mtime":1618775751220,"results":"99","hashOfConfig":"56"},{"size":1790,"mtime":1618783817096,"results":"100","hashOfConfig":"56"},{"size":534,"mtime":1616044534522,"results":"101","hashOfConfig":"56"},{"size":585,"mtime":1616044534525,"results":"102","hashOfConfig":"56"},{"size":3173,"mtime":1616044534528,"results":"103","hashOfConfig":"56"},{"size":3154,"mtime":1616460570862,"results":"104","hashOfConfig":"56"},{"size":4404,"mtime":1618776498019,"results":"105","hashOfConfig":"56"},{"size":3892,"mtime":1618775735968,"results":"106","hashOfConfig":"56"},{"size":2499,"mtime":1619660550917,"results":"107","hashOfConfig":"56"},{"size":4004,"mtime":1619665804763,"results":"108","hashOfConfig":"56"},{"size":1695,"mtime":1619664727908,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"myxo9q",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"112"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"112"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"112"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"112"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"112"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"112"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"112"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\index.js",[],["227","228"],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\App.js",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\Helpers\\auth-helpers.js",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\Context\\user-context.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\Context\\modal-context.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarUsuarios.jsx",["229"],"import React, { useEffect, useState } from \"react\";\r\nimport { Container, Typography } from \"@material-ui/core\";\r\nimport FormUsuarios from \"../components/FormUsuarios\";\r\nimport Axios from \"axios\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { useModal } from \"../Context/modal-context\";\r\nimport { useFormik } from \"formik\";\r\nimport { usuario } from \"../Helpers/model\";\r\nfunction EditarUsuario() {\r\n  const history = useHistory();\r\n  const { setLoading } = useModal();\r\n  const { idUsuario } = useParams();\r\n  const [error, setError] = useState(false);\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      nombre: \"\",\r\n      apellido: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      telefono: \"\",\r\n      tipo_usuario: \"\",\r\n      isTrabajando: false,\r\n    },\r\n    validationSchema: usuario,\r\n    onSubmit: async (data) => {\r\n      if (\r\n        data.nombre === \"\" ||\r\n        data.apellido === \"\" ||\r\n        data.email === \"\" ||\r\n        data.password === \"\" ||\r\n        data.telefono === \"\"\r\n      ) {\r\n        setError(true);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      try {\r\n        await Axios.patch(`/usuarios/${idUsuario}`, data);\r\n        history.goBack();\r\n      } catch (error) {\r\n        setError(true);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    const buscarUsuario = async () => {\r\n      const { data } = await Axios.get(`/usuarios/${idUsuario}`);\r\n      return data;\r\n    };\r\n    setLoading(true);\r\n    buscarUsuario().then((usuario) => {\r\n      formik.initialValues.nombre = usuario.nombre;\r\n      formik.initialValues.apellido = usuario.apellido;\r\n      formik.initialValues.email = usuario.email;\r\n      formik.initialValues.telefono = usuario.telefono;\r\n      formik.initialValues.tipo_usuario = usuario.tipo_usuario;\r\n      formik.initialValues.isTrabajando = usuario.isTrabajando;\r\n      setLoading(false);\r\n    });\r\n  }, [idUsuario]);\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h4\" align=\"center\" gutterBottom>\r\n        Editar Usuario\r\n      </Typography>\r\n      <FormUsuarios error={error} formik={formik} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default EditarUsuario;\r\n","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Empresas.jsx",["230"],"import React, { useEffect, useState } from \"react\";\r\nimport { Container, Typography, Box, Grid, TextField } from \"@material-ui/core\";\r\nimport CardEmpresa from \"../components/CardEmpresa\";\r\nimport { Add } from \"@material-ui/icons\";\r\nimport { SuccessButton } from \"../components/Buttons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\nimport { useModal } from \"../Context/modal-context\";\r\nimport { useUser } from \"../Context/user-context\";\r\nimport Swal from \"sweetalert2\";\r\nfunction Empresas() {\r\n  const { logOut } = useUser();\r\n  const { setLoading } = useModal();\r\n  const [empresas, setEmpresas] = useState([]);\r\n  const [term, setTerm] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function initialEmpresas() {\r\n      const { data } = await Axios.get(\"/empresa\");\r\n      return data;\r\n    }\r\n    setLoading(true);\r\n    initialEmpresas()\r\n      .then((empresas) => {\r\n        setEmpresas(empresas);\r\n      })\r\n      .catch(() => {\r\n        logOut();\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }, [setLoading, logOut]);\r\n\r\n  const handleSearchFilter = (cliente) => {\r\n    return function (x) {\r\n      return x.noCliente == cliente || !cliente;\r\n    };\r\n  };\r\n\r\n  const handleEliminarEmpresa = async (empresaId) => {\r\n    Swal.fire({\r\n      icon: \"question\",\r\n      title: \"Â¿Deseas eliminar la empresa?\",\r\n      text: \"Si tienes datos con esta empresa se perdera.\",\r\n      showCancelButton: true,\r\n    }).then(({ isConfirmed }) => {\r\n      if (isConfirmed) {\r\n        Swal.fire({\r\n          title: \"Â¿Estas seguro que deseas eliminar la empresa?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n        }).then(async ({ isConfirmed }) => {\r\n          if (isConfirmed) {\r\n            await Axios.delete(`/empresa/${empresaId}`);\r\n            await Swal.fire({\r\n              title: \"Se ha eliminado\",\r\n              icon: \"success\",\r\n            });\r\n            const newEmpresas = empresas.filter((emp) => emp._id !== empresaId);\r\n            setEmpresas(newEmpresas);\r\n          } else {\r\n            await Swal.fire({\r\n              title: \"No se ha eliminado\",\r\n              icon: \"error\",\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        Swal.fire({\r\n          title: \"No se ha eliminado\",\r\n          icon: \"error\",\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Box alignItems=\"center\">\r\n        <Typography align=\"center\" variant=\"h4\">\r\n          Lista de Empresas\r\n        </Typography>\r\n        <Box textAlign=\"end\">\r\n          <Link to=\"/empresas/agregar\">\r\n            <SuccessButton startIcon={<Add />}>Agregar</SuccessButton>\r\n          </Link>\r\n        </Box>\r\n        <TextField\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          helperText=\"Busca el codigo de empresa que tienen en el otro sistema\"\r\n          placeholder=\"Codigo\"\r\n          label=\"Busca por codigo de Empresa\"\r\n          fullWidth\r\n          value={term}\r\n          onChange={(texto) => setTerm(texto.target.value)}\r\n        />\r\n      </Box>\r\n      <Grid container spacing={2}>\r\n        {empresas.filter(handleSearchFilter(term)).map((empresa, index) => (\r\n          <Grid key={index} item xs={12} md={6}>\r\n            <CardEmpresa empresa={empresa} eliminar={handleEliminarEmpresa} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Empresas;\r\n","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarEmpresa.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Usuarios.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\AgregarUsuarios.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\AgregarContactoEmpresa.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\AgregarEmpresa.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\ContactoEmpresa.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarAreas.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\AgregarAreas.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Areas.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\AgregarEstacion.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarEstacion.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarContactoEmpresa.jsx",["231"],"import React, { useEffect, useState } from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport FormUsuarios from \"../components/FormUsuarios\";\r\nimport Axios from \"axios\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { useModal } from \"../Context/modal-context\";\r\nimport { useFormik } from \"formik\";\r\nimport { usuario } from \"../Helpers/model\";\r\nfunction EditarContactoEmpresa() {\r\n  const { setLoading } = useModal();\r\n  const history = useHistory();\r\n  const { idUsuario } = useParams();\r\n  const [error, setError] = useState(false);\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      nombre: \"\",\r\n      apellido: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      telefono: \"\",\r\n      tipo_usuario: \"\",\r\n      isTrabajando: false,\r\n    },\r\n    validationSchema: usuario,\r\n    onSubmit: async (usuario) => {\r\n      setLoading(true);\r\n      if (\r\n        usuario.nombre === \"\" ||\r\n        usuario.apellido === \"\" ||\r\n        usuario.email === \"\" ||\r\n        usuario.password === \"\" ||\r\n        usuario.telefono === \"\"\r\n      ) {\r\n        setError(true);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      usuario.isTrabajando = false;\r\n      usuario.tipo_usuario = \"Cliente\";\r\n      try {\r\n        const { data } = await Axios.get(\r\n          `/empresaContacto/usuario/${idUsuario}`\r\n        );\r\n        await Axios.patch(`/empresaContacto/${data._id}`, usuario);\r\n        history.goBack();\r\n      } catch (error) {\r\n        setError(true);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    async function initial() {\r\n      const { data } = await Axios.get(`/empresaContacto/usuario/${idUsuario}`);\r\n      return data;\r\n    }\r\n    setLoading(true);\r\n    initial().then((data) => {\r\n      formik.initialValues.nombre = data.usuario.nombre;\r\n      formik.initialValues.apellido = data.usuario.apellido;\r\n      formik.initialValues.email = data.usuario.email;\r\n      formik.initialValues.telefono = data.usuario.telefono;\r\n      formik.initialValues.tipo_usuario = data.usuario.tipo_usuario;\r\n      formik.initialValues.isTrabajando = data.usuario.isTrabajando;\r\n      setLoading(false);\r\n    });\r\n  }, [setLoading, idUsuario]);\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h4\" align=\"center\">\r\n        Contacto\r\n      </Typography>\r\n      <FormUsuarios error={error} formik={formik} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditarContactoEmpresa;\r\n","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\QRList.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\GraficasMes.jsx",["232","233"],"import React, { useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport moment from \"moment\";\r\nimport Axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useModal } from \"../Context/modal-context\";\r\nimport \"chartjs-plugin-datalabels\";\r\nimport \"moment/locale/es-mx\";\r\n\r\nfunction GraficasMes() {\r\n  const { setLoading } = useModal();\r\n  const { idEmpresa } = useParams();\r\n  const [Mes, setMes] = useState(\"\");\r\n  const [Tipo, setTipo] = useState(\"\");\r\n  const [volador, setVolador] = useState(undefined);\r\n  const [labels, setLabels] = useState([]);\r\n  const [abejas, setAbejas] = useState([]);\r\n  const [moscas, setMoscas] = useState([]);\r\n  const [otros, setOtros] = useState([]);\r\n  //--\r\n  const [tijerilla, setTijerilla] = useState([]);\r\n  const [roedor, setRoedor] = useState([]);\r\n  const [frailecillos, setFrailecillos] = useState([]);\r\n  const [mosca, setMosca] = useState([]);\r\n  const [pinacate, setPinacate] = useState([]);\r\n  const [cochinilla, setCochinilla] = useState([]);\r\n  const [cucurachaAmericana, setCucarachaAme] = useState([]);\r\n  const [cucurachaAlemana, setCucarachaAlem] = useState([]);\r\n  const [araÃ±a, setAraÃ±a] = useState([]);\r\n  const [grillo, setGrillo] = useState([]);\r\n  const [hormiga, setHormiga] = useState([]);\r\n  const [ciempies, setCiempies] = useState([]);\r\n  const [alacran, setAlacran] = useState([]);\r\n  const [moscasV, setMoscasV] = useState([]);\r\n  const [ver, setVer] = useState(false);\r\n\r\n  let pdfExportComponent;\r\n  const estations = [\r\n    {\r\n      value: \"Rastreros\",\r\n      label: \"Rastreros\",\r\n    },\r\n    {\r\n      value: \"Voladores\",\r\n      label: \"Voladores\",\r\n    },\r\n  ];\r\n  const data = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: \"Moscas\",\r\n        backgroundColor: \"rgba(255,99,132,.5)\",\r\n        borderColor: \"rgba(255,99,132,1)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: moscas,\r\n      },\r\n      {\r\n        label: \"Abejas\",\r\n        backgroundColor: \"rgba(235, 64, 52,.5)\",\r\n        borderColor: \"rgba(155,231,91,0.2)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: abejas,\r\n      },\r\n      {\r\n        label: \"Otros\",\r\n        backgroundColor: \"rgba(155,0,91,.5)\",\r\n        borderColor: \"rgba(155,231,91,0.2)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: otros,\r\n      },\r\n    ],\r\n  };\r\n  const dataRastrero = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: \"tijerilla\",\r\n        backgroundColor: \"rgba(255,99,132,.8)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: tijerilla,\r\n      },\r\n      {\r\n        label: \"roedor\",\r\n        backgroundColor: \"rgba(155,231,91,.8)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: roedor,\r\n      },\r\n      {\r\n        label: \"frailecillos\",\r\n        backgroundColor: \" rgb(147, 61, 228,.8)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: frailecillos,\r\n      },\r\n      {\r\n        label: \"mosca\",\r\n        backgroundColor: \" rgb(61, 217, 228,.8)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: mosca,\r\n      },\r\n      {\r\n        label: \"pinacate\",\r\n        backgroundColor: \" rgb(61, 86, 228,.8)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: pinacate,\r\n      },\r\n      {\r\n        label: \"cochinilla\",\r\n        backgroundColor: \" rgb(211, 228, 61,.8)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: cochinilla,\r\n      },\r\n      {\r\n        label: \"cucarachaAmericana\",\r\n        backgroundColor: \" rgb(67, 228, 61,.8)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: cucurachaAmericana,\r\n      },\r\n      {\r\n        label: \"cucarachaAlemana\",\r\n        backgroundColor: \" rgb(228, 61, 61,.8)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: cucurachaAlemana,\r\n      },\r\n      {\r\n        label: \"araÃ±a\",\r\n        backgroundColor: \" rgb(228, 61, 186,.8)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: araÃ±a,\r\n      },\r\n      {\r\n        label: \"hormiga\",\r\n        backgroundColor: \" rgb(53, 146, 6,.8)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: hormiga,\r\n      },\r\n      {\r\n        label: \"ciempies\",\r\n        backgroundColor: \" rgb(61, 228, 172,.8)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: ciempies,\r\n      },\r\n      {\r\n        label: \"alacran\",\r\n        backgroundColor: \" rgb(981, 711, 71,.8)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: alacran,\r\n      },\r\n      {\r\n        label: \"grillo\",\r\n        backgroundColor: \" rgb(228, 183, 61)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        data: grillo,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const handleBuscar = async () => {\r\n    if (Mes === \"\" || Tipo === \"\") {\r\n      alert(\"Llenar los datos correctamente\");\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    const grafica = {\r\n      mes: moment(Mes).format(\"MMMM\"),\r\n      ano: moment(Mes).format(\"YYYY\"),\r\n      tipo: Tipo,\r\n    };\r\n    const {\r\n      data: { graficas },\r\n    } = await Axios.post(`/graficas/mes/${idEmpresa}`, grafica);\r\n\r\n    if (!graficas) {\r\n      alert(\"No existe ningun registro\");\r\n      return;\r\n    }\r\n\r\n    if (Tipo === \"Voladores\") {\r\n      const labels = graficas.map((area) => \r\n         area.nombre\r\n      );\r\n      const abejas = graficas.map((area) => area.abeja\r\n      );\r\n      const mosca = graficas.map((area) => area.mosca\r\n      );\r\n      const otros = graficas.map((area) => area.otros\r\n      );\r\n      setVolador(true);\r\n      setLabels(labels);\r\n      setAbejas(abejas);\r\n      setMoscas(mosca);\r\n      setOtros(otros);\r\n    } else {\r\n      const labels = graficas.map((area) => area.nombre\r\n      );\r\n      const tijerilla = graficas.map((area) => area.tijerilla\r\n      );\r\n      const roedor = graficas.map((area) => area.roedor\r\n      );\r\n      const frailecillos = graficas.map((area) => area.frailecillos\r\n      );\r\n      const mosca = graficas.map((area) => area.mosca\r\n      );\r\n      const pinacate = graficas.map((area) => area.pinacate\r\n      );\r\n      const cochinilla = graficas.map((area) => area.cochinilla\r\n      );\r\n      const cucarachaAmericana = graficas.map((area) => area.cucarachaAmericana\r\n      );\r\n      const cucarachaAlemana = graficas.map((area) => area.cucarachaAlemana\r\n      );\r\n      const araÃ±a = graficas.map((area) => area.araÃ±a\r\n      );\r\n      const grillo = graficas.map((area) => area.grillo\r\n      );\r\n      const hormiga = graficas.map((area) => area.hormiga\r\n      );\r\n      const ciempies = graficas.map((area) => area.ciempies\r\n      );\r\n      const alacran = graficas.map((area) => area.alacran\r\n      );\r\n\r\n      setLabels(labels);\r\n      setVolador(false);\r\n      setTijerilla(tijerilla);\r\n      setRoedor(roedor);\r\n      setFrailecillos(frailecillos);\r\n      setMosca(mosca);\r\n      setPinacate(pinacate);\r\n      setCochinilla(cochinilla);\r\n      setCucarachaAme(cucarachaAmericana);\r\n      setCucarachaAlem(cucarachaAlemana);\r\n      setAraÃ±a(araÃ±a);\r\n      setGrillo(grillo);\r\n      setHormiga(hormiga);\r\n      setCiempies(ciempies);\r\n      setAlacran(alacran);\r\n    }\r\n    setVer(true);\r\n    setLoading(false);\r\n  };\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        alignItems=\"center\"\r\n        style={{ marginBottom: 15 }}\r\n      >\r\n        <Grid item md={4}>\r\n          <TextField\r\n            fullWidth\r\n            value={Mes}\r\n            type=\"month\"\r\n            label=\"\"\r\n            onChange={(e) => {\r\n              setVer(false);\r\n              setMes(e.target.value);\r\n            }}\r\n            helperText=\"Seleccione mes y aÃ±o\"\r\n          />\r\n        </Grid>\r\n        <Grid item md={4}>\r\n          <TextField\r\n            fullWidth\r\n            select\r\n            label=\"Selecciona\"\r\n            value={Tipo}\r\n            onChange={(e) => {\r\n              setVer(false);\r\n              setTipo(e.target.value);\r\n            }}\r\n            helperText=\"Seleccione tipo de estacion\"\r\n          >\r\n            {estations.map((option, index) => (\r\n              <MenuItem key={index} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item md={2}>\r\n          <Button\r\n            fullWidth\r\n            onClick={handleBuscar}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Aceptar\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <br />\r\n      {ver && (\r\n        <>\r\n          <Grid container>\r\n            <Grid item xs={12}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  pdfExportComponent.save();\r\n                }}\r\n              >\r\n                Generar archivo\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <PDFExport\r\n            paperSize=\"letter\"\r\n            scale={0.7}\r\n            margin=\"1cm\"\r\n            fileName={`${moment(Mes).format(\"MMMM\")}-reporte`}\r\n            landscape={true}\r\n            ref={(component) => (pdfExportComponent = component)}\r\n          >\r\n            <Grid container justify=\"center\">\r\n              <Grid item>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {`${Mes} de ${Tipo}`}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n              <Grid item xs={12} lg={10}>\r\n                <Bar\r\n                  plugins={{\r\n                    datalabels: {\r\n                      display: (ctx) => {\r\n                        return true;\r\n                      },\r\n                      formatter: (ctx, data) => {\r\n                        return `${data.dataIndex}`;\r\n                      },\r\n                    },\r\n                  }}\r\n                  data={volador ? data : dataRastrero}\r\n                  options={{\r\n                    responsive: true,\r\n                    maintainAspectRatio: true,\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </PDFExport>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GraficasMes;\r\n","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Graficas.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\GraficasAÃ±oArea.jsx",["234"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  MenuItem,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { useModal } from \"../Context/modal-context\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\nimport ContainerTablaAreaAnual from \"../components/ContainerTablaAreaAnual\";\r\nimport \"chartjs-plugin-datalabels\";\r\nimport Swal from \"sweetalert2\";\r\nfunction GraficasAÃ±oAnual() {\r\n  const { setLoading } = useModal();\r\n  const [revisiones, setRevisiones] = useState([]);\r\n  const { idEmpresa } = useParams();\r\n  const [primerAÃ±o, setPrimerAÃ±o] = useState(\"\");\r\n  const [segundoAÃ±o, setSegundoAÃ±o] = useState(\"\");\r\n  let pdfExportComponent;\r\n  const aÃ±os = [\r\n    \"\",\r\n    \"2019\",\r\n    \"2020\",\r\n    \"2021\",\r\n    \"2022\",\r\n    \"2023\",\r\n    \"2024\",\r\n    \"2025\",\r\n    \"2026\",\r\n    \"2027\",\r\n    \"2028\",\r\n    \"2029\",\r\n    \"2030\",\r\n  ];\r\n  const handleBuscar = async () => {\r\n    if (primerAÃ±o === \"\" || segundoAÃ±o === \"\") {\r\n      Swal.fire({\r\n        icon: \"warning\",\r\n        title: \"Campos vacios\",\r\n      });\r\n      return;\r\n    }if(primerAÃ±o == segundoAÃ±o){\r\n      Swal.fire({\r\n        icon: \"warning\",\r\n        title: \"Campos iguales\",\r\n      });\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    const { data } = await Axios.post(`/graficas/ano/area/${idEmpresa}`, {\r\n      tipo: \"Voladores\",\r\n      primerAÃ±o,\r\n      segundoAÃ±o,\r\n    });\r\n    setLoading(false);\r\n    setRevisiones(data);\r\n  };\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        justify=\"flex-start\"\r\n        alignItems=\"center\"\r\n        spacing={2}\r\n        style={{ marginBottom: 7 }}\r\n      >\r\n        <Grid item xs={12} md={4}>\r\n          <TextField\r\n            select\r\n            label=\"Primer aÃ±o\"\r\n            value={primerAÃ±o}\r\n            onChange={(e) => {\r\n              setRevisiones([]);\r\n              setPrimerAÃ±o(e.target.value);\r\n            }}\r\n            helperText=\"Seleccione el primer aÃ±o\"\r\n          >\r\n            {aÃ±os.map((option, index) => (\r\n              <MenuItem key={index} value={option}>\r\n                {option}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <TextField\r\n            select\r\n            label=\"Segundo aÃ±o\"\r\n            value={segundoAÃ±o}\r\n            onChange={(e) => {\r\n              setRevisiones([]);\r\n              setSegundoAÃ±o(e.target.value);\r\n            }}\r\n            helperText=\"Seleccione el segundo aÃ±o\"\r\n          >\r\n            {aÃ±os.map((option, index) => (\r\n              <MenuItem key={index} value={option}>\r\n                {option}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <Button\r\n            onClick={handleBuscar}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            fullWidth\r\n          >\r\n            Aceptar\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container>\r\n        <Grid container justify=\"center\">\r\n          {revisiones.length > 0 && (\r\n            <>\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  color=\"primary\"\r\n                  onClick={() => pdfExportComponent.save()}\r\n                >\r\n                  Generar archivo\r\n                </Button>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={12} lg={10} xl={8}>\r\n                <PDFExport\r\n                  paperSize=\"letter\"\r\n                  margin={{left: \"1cm\", right: \"1cm\", bottom:\"5mm\"}}\r\n                  scale={0.5}\r\n                  fileName={`reporte-anual-por-areas-voladores`}\r\n                  ref={(component) => (pdfExportComponent = component)}\r\n                >\r\n                  <ContainerTablaAreaAnual\r\n                    revision={revisiones}\r\n                    primerAÃ±o={primerAÃ±o}\r\n                    segundoAÃ±o={segundoAÃ±o}\r\n                  />\r\n                </PDFExport>\r\n              </Grid>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GraficasAÃ±oAnual;\r\n","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Historial.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\GraficasAnual.jsx",["235"],"import React, { useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useModal } from \"../Context/modal-context\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport Axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"chartjs-plugin-datalabels\";\r\nimport Swal from \"sweetalert2\";\r\nfunction GraficasAnual() {\r\n  const { idEmpresa } = useParams();\r\n  const [Tipo, setTipo] = useState(\"\");\r\n  const { setLoading } = useModal();\r\n  const [volador, setVolador] = useState(undefined);\r\n  const [labels, setLabels] = useState([]);\r\n  const [abejas, setAbejas] = useState([]);\r\n  const [moscas, setMoscas] = useState([]);\r\n  /* const [otros, setOtros] = useState([]); */\r\n  //--\r\n  const [tijerilla, setTijerilla] = useState([]);\r\n  const [roedor, setRoedor] = useState([]);\r\n  const [frailecillos, setFrailecillos] = useState([]);\r\n  const [mosca, setMosca] = useState([]);\r\n  const [pinacate, setPinacate] = useState([]);\r\n  const [cochinilla, setCochinilla] = useState([]);\r\n  const [cucurachaAmericana, setCucarachaAme] = useState([]);\r\n  const [cucurachaAlemana, setCucarachaAlem] = useState([]);\r\n  const [araÃ±a, setAraÃ±a] = useState([]);\r\n  const [grillo, setGrillo] = useState([]);\r\n  const [hormiga, setHormiga] = useState([]);\r\n  const [ciempies, setCiempies] = useState([]);\r\n  const [alacran, setAlacran] = useState([]);\r\n  const [ver, setVer] = useState(false);\r\n\r\n  const [primerAÃ±o, setPrimerAÃ±o] = useState(\"\");\r\n  const [segundoAÃ±o, setSegundoAÃ±o] = useState(\"\");\r\n  const aÃ±os = [\r\n    \"\",\r\n    \"2019\",\r\n    \"2020\",\r\n    \"2021\",\r\n    \"2022\",\r\n    \"2023\",\r\n    \"2024\",\r\n    \"2025\",\r\n    \"2026\",\r\n    \"2027\",\r\n    \"2028\",\r\n    \"2029\",\r\n    \"2030\",\r\n  ];\r\n  let pdfExportComponent;\r\n  const estations = [\r\n    {\r\n      value: \"Rastreros\",\r\n      label: \"Rastreros\",\r\n    },\r\n    {\r\n      value: \"Voladores\",\r\n      label: \"Voladores\",\r\n    },\r\n  ];\r\n  const data = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: \"Moscas\",\r\n        backgroundColor: \"rgba(255,99,132,.5)\",\r\n        borderColor: \"rgba(255,99,132,1)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: moscas,\r\n      },\r\n      {\r\n        label: \"Abejas\",\r\n        backgroundColor: \"rgba(235, 64, 52,.5)\",\r\n        borderColor: \"rgba(155,231,91,0.2)\",\r\n        borderWidth: 1,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: abejas,\r\n      },\r\n    ],\r\n  };\r\n  const dataRastrero = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: \"tijerilla\",\r\n        backgroundColor: \"rgba(255,99,132,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: tijerilla,\r\n      },\r\n      {\r\n        label: \"roedor\",\r\n        backgroundColor: \"rgba(155,231,91,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: roedor,\r\n      },\r\n      {\r\n        label: \"frailecillos\",\r\n        backgroundColor: \" rgb(147, 61, 228,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: frailecillos,\r\n      },\r\n      {\r\n        label: \"mosca\",\r\n        backgroundColor: \" rgb(117, 239, 248,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255))\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: mosca,\r\n      },\r\n      {\r\n        label: \"pinacate\",\r\n        backgroundColor: \" rgb(61, 86, 228,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: pinacate,\r\n      },\r\n      {\r\n        label: \"cochinilla\",\r\n        backgroundColor: \" rgb(211, 228, 61,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: cochinilla,\r\n      },\r\n      {\r\n        label: \"cucarachaAmericana\",\r\n        backgroundColor: \" rgb(67, 228, 61,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: cucurachaAmericana,\r\n      },\r\n      {\r\n        label: \"cucarachaAlemana\",\r\n        backgroundColor: \" rgb(228, 61, 61,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: cucurachaAlemana,\r\n      },\r\n      {\r\n        label: \"araÃ±a\",\r\n        backgroundColor: \" rgb(228, 61, 186,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: araÃ±a,\r\n      },\r\n      {\r\n        label: \"hormiga\",\r\n        backgroundColor: \" rgb(195, 61, 228,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: hormiga,\r\n      },\r\n      {\r\n        label: \"ciempies\",\r\n        backgroundColor: \" rgb(61, 228, 172,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: ciempies,\r\n      },\r\n      {\r\n        label: \"alacran\",\r\n        backgroundColor: \" rgb(61, 228, 172,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: alacran,\r\n      },\r\n      {\r\n        label: \"grillo\",\r\n        backgroundColor: \" rgb(228, 183, 61,0.5)\",\r\n        borderColor: \" rgb(255, 255, 255)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: grillo,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const handleBuscar = async () => {\r\n    if (Tipo === \"\" || primerAÃ±o === \"\" || segundoAÃ±o === \"\") {\r\n      Swal.fire({\r\n        icon: \"warning\",\r\n        title: \"Campos vacios\",\r\n      });\r\n      return;\r\n    }\r\n    if (primerAÃ±o == segundoAÃ±o) {\r\n      Swal.fire({\r\n        icon: \"warning\",\r\n        title: \"Campos iguales\",\r\n      });\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    const { data } = await Axios.post(`/graficas/ano/${idEmpresa}`, {\r\n      tipo: Tipo,\r\n      primerAÃ±o,\r\n      segundoAÃ±o,\r\n    });\r\n    if (Tipo === \"Voladores\") {\r\n      const labels = data.map((area) => {\r\n        return area.aÃ±o;\r\n      });\r\n      const abejas = data.map((area) => {\r\n        return area.abeja;\r\n      });\r\n      const mosca = data.map((area) => {\r\n        return area.mosca;\r\n      });\r\n      /* const otros = data.map((area) => {\r\n        return area.otros;\r\n      }); */\r\n      setVolador(true);\r\n      setLabels(labels);\r\n      setAbejas(abejas);\r\n      setMoscas(mosca);\r\n      /* setOtros(otros); */\r\n    } else {\r\n      const labels = data.map((area) => {\r\n        return area.aÃ±o;\r\n      });\r\n      const tijerilla = data.map((area) => {\r\n        return area.tijerilla;\r\n      });\r\n      const roedor = data.map((area) => {\r\n        return area.roedor;\r\n      });\r\n      const frailecillos = data.map((area) => {\r\n        return area.frailecillos;\r\n      });\r\n      const mosca = data.map((area) => {\r\n        return area.mosca;\r\n      });\r\n      const pinacate = data.map((area) => {\r\n        return area.pinacate;\r\n      });\r\n      const cochinilla = data.map((area) => {\r\n        return area.cochinilla;\r\n      });\r\n      const cucarachaAmericana = data.map((area) => {\r\n        return area.cucarachaAmericana;\r\n      });\r\n      const cucarachaAlemana = data.map((area) => {\r\n        return area.cucarachaAlemana;\r\n      });\r\n      const araÃ±a = data.map((area) => {\r\n        return area.araÃ±a;\r\n      });\r\n      const grillo = data.map((area) => {\r\n        return area.grillo;\r\n      });\r\n      const hormiga = data.map((area) => {\r\n        return area.hormiga;\r\n      });\r\n      const ciempies = data.map((area) => {\r\n        return area.ciempies;\r\n      });\r\n      const alacran = data.map((area) => {\r\n        return area.alacran;\r\n      });\r\n\r\n      setLabels(labels);\r\n      setVolador(false);\r\n      setTijerilla(tijerilla);\r\n      setRoedor(roedor);\r\n      setFrailecillos(frailecillos);\r\n      setMosca(mosca);\r\n      setPinacate(pinacate);\r\n      setCochinilla(cochinilla);\r\n      setCucarachaAme(cucarachaAmericana);\r\n      setCucarachaAlem(cucarachaAlemana);\r\n      setAraÃ±a(araÃ±a);\r\n      setGrillo(grillo);\r\n      setHormiga(hormiga);\r\n      setCiempies(ciempies);\r\n      setAlacran(alacran);\r\n    }\r\n    setVer(true);\r\n    setLoading(false);\r\n  };\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        alignItems=\"center\"\r\n        style={{ marginBottom: 15 }}\r\n      >\r\n        <Grid item md={4}>\r\n          <TextField\r\n            fullWidth\r\n            select\r\n            label=\"Selecciona\"\r\n            value={Tipo}\r\n            onChange={(e) => setTipo(e.target.value)}\r\n            helperText=\"Seleccione tipo de estacion\"\r\n          >\r\n            {estations.map((option, index) => (\r\n              <MenuItem key={index} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <TextField\r\n            select\r\n            label=\"Primer aÃ±o\"\r\n            value={primerAÃ±o}\r\n            onChange={(e) => {\r\n              setVer(false);\r\n              setPrimerAÃ±o(e.target.value);\r\n            }}\r\n            helperText=\"Seleccione el primer aÃ±o\"\r\n          >\r\n            {aÃ±os.map((option, index) => (\r\n              <MenuItem key={index} value={option}>\r\n                {option}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <TextField\r\n            select\r\n            label=\"Segundo aÃ±o\"\r\n            value={segundoAÃ±o}\r\n            onChange={(e) => {\r\n              setVer(false);\r\n              setSegundoAÃ±o(e.target.value);\r\n            }}\r\n            helperText=\"Seleccione el segundo aÃ±o\"\r\n          >\r\n            {aÃ±os.map((option, index) => (\r\n              <MenuItem key={index} value={option}>\r\n                {option}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item md={2}>\r\n          <Button\r\n            fullWidth\r\n            onClick={handleBuscar}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Aceptar\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <br />\r\n      {ver ? (\r\n        <>\r\n          <Grid container>\r\n            <Grid item xs={12}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  pdfExportComponent.save();\r\n                }}\r\n              >\r\n                Generar archivo\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <PDFExport\r\n            paperSize=\"letter\"\r\n            scale={0.7}\r\n            margin=\"1cm\"\r\n            fileName={`${volador ? \"Voladores\" : \"Rastreros\"}-aÃ±os`}\r\n            landscape={true}\r\n            ref={(component) => (pdfExportComponent = component)}\r\n          >\r\n            <Grid container justify=\"center\">\r\n              <Grid item>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {`Graficas Anual de ${Tipo}`}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n              <Grid item xs={12} lg={10}>\r\n                <Bar\r\n                  plugins={{\r\n                    datalabels: {\r\n                      display: (ctx) => {\r\n                        return true;\r\n                      },\r\n                      formatter: (ctx, data) => {\r\n                        return `${data.dataIndex}`;\r\n                      },\r\n                    },\r\n                  }}\r\n                  data={volador ? data : dataRastrero}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </PDFExport>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GraficasAnual;\r\n","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Login.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Cliente.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Revision.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\EditarRevision.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\PrivateRoute.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\pages\\Estaciones.jsx",["236"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  Typography,\r\n  MenuItem,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { SuccessButton } from \"../components/Buttons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CardEstacion from \"../components/CardEstacion\";\r\nimport Axios from \"axios\";\r\nimport { useModal } from \"../Context/modal-context\";\r\nimport { useUser } from \"../Context/user-context\";\r\nimport DescripcionEstaciones from \"../components/DescripcionEstaciones\";\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\";\r\nfunction Estaciones() {\r\n  const { logOut } = useUser();\r\n  const { setLoading } = useModal();\r\n  const [Clientes, setClientes] = useState([]);\r\n  const [Areas, setAreas] = useState([]);\r\n  const [Estaciones, setEstaciones] = useState([]);\r\n  const [buscar, setBuscar] = useState(false);\r\n  const [Cliente, setCliente] = useState(\"\");\r\n  const [Area, setArea] = useState(\"\");\r\n\r\n  const [term, setTerm] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function initial() {\r\n      const { data } = await Axios.get(\"/empresa\");\r\n      return data;\r\n    }\r\n    setLoading(true);\r\n    initial()\r\n      .then((resp) => {\r\n        setClientes(resp);\r\n      })\r\n      .catch(() => {\r\n        logOut();\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }, [setLoading, logOut]);\r\n\r\n  const handleSearchEstacion = (term) => {\r\n    return function (x) {\r\n      return x.numero == term || !term;\r\n    };\r\n  };\r\n  const handleListAreas = () => {\r\n    if (Cliente === \"\") {\r\n      alert(\"Un espacio vacio\");\r\n      return;\r\n    }\r\n    Axios.get(`/area?empresa=${Cliente}`).then(({ data }) => {\r\n      setAreas(data);\r\n    });\r\n  };\r\n  const handleListEstaciones = async () => {\r\n    if (Cliente === \"\" || Area === \"\") {\r\n      alert(\"Espacios Vacios\");\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    const { data } = await Axios.get(\r\n      `/estacion?empresa=${Cliente}&area=${Area}`\r\n    );\r\n    setBuscar(true);\r\n    setEstaciones(data);\r\n    setLoading(false);\r\n  };\r\n  const handleDeleteEstacion = (estacionEliminar) => {\r\n    Swal.fire({\r\n      title: \"Â¿Desea Eliminar la estacion?\",\r\n      icon: \"question\",\r\n      showCancelButton: true,\r\n    }).then(async ({ isConfirmed }) => {\r\n      if (isConfirmed) {\r\n        await Axios.delete(`/estacion/${estacionEliminar}`);\r\n        await Swal.fire({\r\n          title: \"Se elimino correctamente\",\r\n          icon: \"success\",\r\n        });\r\n        const newAreas = Estaciones.filter(\r\n          (estacion) => estacion._id !== estacionEliminar\r\n        );\r\n        setEstaciones(newAreas);\r\n      } else {\r\n        Swal.fire({\r\n          title: \"No se cancelo la estacion\",\r\n          icon: \"error\",\r\n        });\r\n      }\r\n    });\r\n  };\r\n  const handleCambiarEstacion = (estacion) => {\r\n    let options = {};\r\n    Areas.map((area) => {\r\n      return (options[area._id] = area.nombre);\r\n    });\r\n    Swal.fire({\r\n      title: \"Cambiar de area\",\r\n      input: \"select\",\r\n      inputOptions: options,\r\n      inputPlaceholder: \"Selecciona el area\",\r\n      showCancelButton: true,\r\n      inputValidator: (value) => {\r\n        return new Promise((resolve) => {\r\n          if (value === \"\") {\r\n            resolve(\"Selecciona alguna area\");\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      },\r\n    }).then(async ({ value, isConfirmed }) => {\r\n      if (isConfirmed) {\r\n        if (Area === value) {\r\n          await Swal.fire({\r\n            title: \"La estacion ya pertenece a la estacion que elegiste.\",\r\n            icon: \"question\",\r\n          });\r\n          return;\r\n        }\r\n        estacion.area = value;\r\n        estacion.empresa = estacion.empresa._id;\r\n        await axios.patch(`/estacion/${estacion._id}`, estacion);\r\n        await Swal.fire({\r\n          title: \"Se hizo el movimiento de estacion\",\r\n          icon: \"success\",\r\n        });\r\n        const newEstaciones = Estaciones.filter(\r\n          (est) => est._id !== estacion._id\r\n        );\r\n        setEstaciones(newEstaciones);\r\n      } else {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Se cancelo el movimiento\",\r\n        });\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <Typography align=\"center\" variant=\"h4\" component=\"h1\" gutterBottom>\r\n        Estaciones\r\n      </Typography>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12} md={10}>\r\n          <TextField\r\n            fullWidth\r\n            select\r\n            label=\"Empresa\"\r\n            helperText=\"Selecciona el nombre de la empresa o cliente\"\r\n            value={Cliente}\r\n            onChange={(e) => {\r\n              setAreas([]);\r\n              setBuscar(false);\r\n              setCliente(e.target.value);\r\n            }}\r\n          >\r\n            {Clientes.map((option, index) => (\r\n              <MenuItem key={index} value={option._id}>\r\n                {option.nombre}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item xs={12} md={2}>\r\n          <SuccessButton fullWidth onClick={handleListAreas}>\r\n            Buscar\r\n          </SuccessButton>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {Areas.length > 0 && (\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} md={10}>\r\n            <TextField\r\n              fullWidth\r\n              select\r\n              label=\"Area\"\r\n              helperText=\"Selecciona el nombre del area para ver lista de estaciones\"\r\n              value={Area}\r\n              onChange={(e) => {\r\n                setBuscar(false);\r\n                setArea(e.target.value);\r\n              }}\r\n            >\r\n              {Areas.map((option, index) => (\r\n                <MenuItem key={index} value={option._id}>\r\n                  {option.nombre}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n          </Grid>\r\n          <Grid item xs={12} md={2}>\r\n            <SuccessButton onClick={handleListEstaciones} fullWidth>\r\n              Buscar\r\n            </SuccessButton>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      {buscar && (\r\n        <>\r\n          <Link\r\n            to={{\r\n              pathname: \"/estaciones/agregar\",\r\n              state: { Empresa: Cliente, Area },\r\n            }}\r\n          >\r\n            <SuccessButton fullWidth>Agregar</SuccessButton>\r\n          </Link>\r\n          <br />\r\n          <br />\r\n          <Grid container spacing={5}>\r\n            {Estaciones.length > 0 ? (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <Link to={`/QRList/${Cliente}/${Area}`}>\r\n                    <Button variant=\"outlined\" color=\"primary\" fullWidth>\r\n                      Generar PDF de QR's\r\n                    </Button>\r\n                  </Link>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography align=\"center\" variant=\"h5\" gutterBottom>\r\n                    Lista de estaciones\r\n                  </Typography>\r\n                </Grid>\r\n                <DescripcionEstaciones estaciones={Estaciones} />\r\n                <TextField\r\n                  margin=\"normal\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"Busca por numero de estacion\"\r\n                  placeholder=\"Numero de dispositivo\"\r\n                  label=\"Busca por numero de estacion\"\r\n                  fullWidth\r\n                  value={term}\r\n                  onChange={(texto) => setTerm(texto.target.value)}\r\n                />\r\n                {Estaciones.filter(handleSearchEstacion(term)).map(\r\n                  (estacion, index) => (\r\n                    <Grid key={index} item xs={12} md={6}>\r\n                      <CardEstacion\r\n                        eliminar={handleDeleteEstacion}\r\n                        estacion={estacion}\r\n                        cambiar={handleCambiarEstacion}\r\n                      />\r\n                    </Grid>\r\n                  )\r\n                )}\r\n              </>\r\n            ) : (\r\n              <Grid container justify=\"center\" style={{ marginTop: 15 }}>\r\n                <Grid item>\r\n                  <Typography variant=\"subtitle2\">\r\n                    No hay ninguna estacion en esta area\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Estaciones;\r\n","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\Layout.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\Helpers\\model.js",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\FormUsuarios.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\Buttons.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\CardEmpresa.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\Modal.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\FormEmpresa.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\CardArea.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\DescripcionEstaciones.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\CardEstacion.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TablaRastrero.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TablaRoedores.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TablaVoladores.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\CardRevision.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\CardQR.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\ContainerTablaAreaAnual.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\FormEstacion.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TableAreaAnualVolador.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\RowTableRastrero.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\RowTableVoladores.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\RowTableRoedores.jsx",[],"C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TablaRevisiones.jsx",["237","238"],"import React, { useState, useEffect } from \"react\";\r\nimport TablaRastrero from \"./TablaRastrero\";\r\nimport TablaVoladores from \"./TablaVoladores\";\r\nimport TablaRoedores from \"./TablaRoedores\";\r\nimport TablaYellow from \"./TablaYellow\";\r\nimport { SuccessButton } from \"./Buttons\";\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction TablaRevisiones({ area, revision, corta, actualizar }) {\r\n  const [Area, setArea] = useState(\"\");\r\n  const [Rastreros, setRastreros] = useState([]);\r\n  const [Roedores, setRoedores] = useState([]);\r\n  const [Voladores, setVoladores] = useState([]);\r\n  const [Jacket, setJacket] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setArea(area.area._id);\r\n    setRastreros(area.rastreros);\r\n    setRoedores(area.roedores);\r\n    setVoladores(area.voladores);\r\n    setJacket(area.jacket);\r\n  }, [area]);\r\n\r\n  const handleChangeRoedores = (id, name, value) => {\r\n    const estacion = Roedores.filter((estacion) => estacion._id === id);\r\n    const estacionBuscada = estacion[0];\r\n    estacionBuscada[name] = value;\r\n    const nuevoArreglo = Roedores.map((estacion) => {\r\n      if (estacion._id === id) {\r\n        estacion = estacionBuscada;\r\n      }\r\n      return estacion;\r\n    });\r\n    setRoedores(nuevoArreglo);\r\n  };\r\n  const handleChangeRastreros = (id, name, value) => {\r\n    const estacion = Rastreros.filter((estacion) => estacion._id === id);\r\n    const estacionBuscada = estacion[0];\r\n    estacionBuscada[name] = value;\r\n    const nuevoArreglo = Rastreros.map((estacion) => {\r\n      if (estacion._id === id) {\r\n        estacion = estacionBuscada;\r\n      }\r\n      return estacion;\r\n    });\r\n    setRastreros(nuevoArreglo);\r\n  };\r\n  const handleChangeVoladores = (id, name, value) => {\r\n    const estacion = Voladores.filter((estacion) => estacion._id === id);\r\n    const estacionBuscada = estacion[0];\r\n    estacionBuscada[name] = value;\r\n    const nuevoArreglo = Voladores.map((estacion) => {\r\n      if (estacion._id === id) {\r\n        estacion = estacionBuscada;\r\n      }\r\n      return estacion;\r\n    });\r\n    setVoladores(nuevoArreglo);\r\n  };\r\n  const handleChangeYellow = (id, name, value) => {\r\n    const estacion = Jacket.filter((estacion) => estacion._id === id);\r\n    const estacionBuscada = estacion[0];\r\n    estacionBuscada[name] = value;\r\n    const nuevoArreglo = Jacket.map((estacion) => {\r\n      if (estacion._id === id) {\r\n        estacion = estacionBuscada;\r\n      }\r\n      return estacion;\r\n    });\r\n    setJacket(nuevoArreglo);\r\n  };\r\n\r\n  const handleUpdateData = async () => {\r\n    const cantidadCebos = Roedores.reduce(\r\n      (acum, obj) =>\r\n        (acum =\r\n          acum +\r\n          parseInt(obj.consumoDescomposicion) +\r\n          parseInt(obj.consumoInsectos) +\r\n          parseInt(obj.consumoRoedor) +\r\n          parseInt(obj.reposicionCeboRotacion)),\r\n      0\r\n    );\r\n    await axios.patch(`/revisionAreas/${area._id}/${revision}`, {\r\n      area: {\r\n        area: Area,\r\n        rastreros: Rastreros,\r\n        roedores: Roedores,\r\n        voladores: Voladores,\r\n        jacket: Jacket,\r\n      },\r\n      cantidadCebos,\r\n    });\r\n    await Swal.fire({\r\n      title: \"Correccion Satisfactoria\",\r\n      text:\r\n        \"Se ha hecho la correccion de la revision, se volvieron a generar los reportes, puedes revisarlos en el boton de descarga.\",\r\n      icon: \"success\",\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <SuccessButton fullWidth onClick={handleUpdateData}>\r\n        Cambiar\r\n      </SuccessButton>\r\n      <TablaRoedores roedores={Roedores} change={handleChangeRoedores} />\r\n      <TablaRastrero\r\n        corta={corta.tipoVoladores == \"Corto\" ? true : false}\r\n        rastreros={Rastreros}\r\n        change={handleChangeRastreros}\r\n      />\r\n      <TablaVoladores\r\n        corta={corta.tipoRastreros == \"Corto\" ? true : false}\r\n        voladores={Voladores}\r\n        change={handleChangeVoladores}\r\n      />\r\n      <TablaYellow jacket={Jacket} change={handleChangeYellow} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TablaRevisiones;\r\n","C:\\Users\\cyasa\\Documents\\Repositorios\\LAUREL\\frontend-plagas\\src\\components\\TablaYellow.jsx",[],{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","severity":1,"message":"244","line":62,"column":6,"nodeType":"245","endLine":62,"endColumn":17,"suggestions":"246"},{"ruleId":"247","severity":1,"message":"248","line":37,"column":26,"nodeType":"249","messageId":"250","endLine":37,"endColumn":28},{"ruleId":"243","severity":1,"message":"251","line":68,"column":6,"nodeType":"245","endLine":68,"endColumn":29,"suggestions":"252"},{"ruleId":"253","severity":1,"message":"254","line":42,"column":10,"nodeType":"255","messageId":"256","endLine":42,"endColumn":17},{"ruleId":"253","severity":1,"message":"257","line":42,"column":19,"nodeType":"255","messageId":"256","endLine":42,"endColumn":29},{"ruleId":"247","severity":1,"message":"248","line":44,"column":19,"nodeType":"249","messageId":"250","endLine":44,"endColumn":21},{"ruleId":"247","severity":1,"message":"248","line":221,"column":19,"nodeType":"249","messageId":"250","endLine":221,"endColumn":21},{"ruleId":"247","severity":1,"message":"248","line":50,"column":23,"nodeType":"249","messageId":"250","endLine":50,"endColumn":25},{"ruleId":"247","severity":1,"message":"248","line":109,"column":36,"nodeType":"249","messageId":"250","endLine":109,"endColumn":38},{"ruleId":"247","severity":1,"message":"248","line":114,"column":36,"nodeType":"249","messageId":"250","endLine":114,"endColumn":38},"no-native-reassign",["258"],"no-negated-in-lhs",["259"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formik.initialValues' and 'setLoading'. Either include them or remove the dependency array.","ArrayExpression",["260"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'formik.initialValues'. Either include it or remove the dependency array.",["261"],"no-unused-vars","'moscasV' is assigned a value but never used.","Identifier","unusedVar","'setMoscasV' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},"Update the dependencies array to be: [formik.initialValues, idUsuario, setLoading]",{"range":"266","text":"267"},"Update the dependencies array to be: [setLoading, idUsuario, formik.initialValues]",{"range":"268","text":"269"},[1942,1953],"[formik.initialValues, idUsuario, setLoading]",[2201,2224],"[setLoading, idUsuario, formik.initialValues]"]